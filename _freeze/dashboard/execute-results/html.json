{
  "hash": "cdcc6167c19f09310ddaa28c7c307d82",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Smart Grid Perception Dashboard\"\noutput: \n  html_document:\n    theme: cosmo\nruntime: shiny\n---\n\n::: {.cell .hidden}\n\n```{.r .cell-code .hidden}\nlibrary(shiny)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'shiny' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(shinydashboard)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'shinydashboard' was built under R version 4.2.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'shinydashboard'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following object is masked from 'package:graphics':\n\n    box\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(ggplot2)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'ggplot2' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'dplyr' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(DT)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'DT' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'DT'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:shiny':\n\n    dataTableOutput, renderDataTable\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(plotly)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'plotly' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'plotly'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following object is masked from 'package:graphics':\n\n    layout\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(shinyWidgets)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'shinyWidgets' was built under R version 4.2.2\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(janitor)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'janitor' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'janitor'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(tidyr)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'tidyr' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# Load Data and clean column names\nif (!file.exists(\"DatasetSM.csv\")) {\n  stop(\"Dataset file not found. Please ensure 'DatasetSM.csv' is in the correct directory.\")\n}\n\ndf <- read.csv(\"DatasetSM.csv\")\nif (nrow(df) == 0) {\n  stop(\"The dataset is empty.\")\n}\n\ndf <- clean_names(df)\n# Custom CSS for styling\ncustom_css <- \"\n  .skin-blue .main-header .logo {\n    background-color: #367fa9;\n    color: #fff;\n    font-weight: bold;\n  }\n  .skin-blue .main-header .navbar {\n    background-color: #3c8dbc;\n  }\n  .skin-blue .sidebar {\n    background-color: #222d32;\n  }\n  .skin-blue .sidebar-menu li a {\n    color: #b8c7ce;\n  }\n  .skin-blue .sidebar-menu li.active a {\n    color: #fff;\n    background-color: #1e282c;\n  }\n\"\n\n# UI\nui <- dashboardPage(\n  skin = \"blue\",\n  dashboardHeader(\n    title = \"Smart Grid Perception Dashboard\",\n    titleWidth = 300\n  ),\n  dashboardSidebar(\n    width = 300,\n    sidebarMenu(\n      menuItem(\"Welcome\", tabName = \"welcome\", icon = icon(\"home\")),\n      menuItem(\"Perception Analysis\", tabName = \"perception\", icon = icon(\"chart-bar\")),\n      menuItem(\"Inferential Analysis\", tabName = \"inferential\", icon = icon(\"calculator\"),\n               menuSubItem(\"Chi-Square Test\", tabName = \"chi_square\"),\n               menuSubItem(\"T-Test\", tabName = \"t_test\"),\n               menuSubItem(\"ANOVA\", tabName = \"anova\")\n      ),\n      menuItem(\"Demographic Visualization\", tabName = \"demographic\", icon = icon(\"users\"))\n    )\n  ),\n  dashboardBody(\n    tags$head(tags$style(HTML(custom_css))),\n    tabItems(\n      # Welcome Tab\n      tabItem(\n        tabName = \"welcome\",\n        fluidRow(\n          box(\n            width = 12,\n            h2(\"Welcome to the Smart Grid Perception Dashboard\"),\n            p(\"This interactive dashboard provides insights into the perception of smart grid technologies and smart appliances across various states in India.\"),\n            hr(),\n            h3(\"Objectives of the Work\"),\n            tags$ul(\n              tags$li(\"Visualize demographic profiles and perception data.\"),\n              tags$li(\"Perform inferential statistical tests (Chi-Square, T-test, ANOVA).\"),\n              tags$li(\"Gain insights into the perception of smart grid products across different demographic groups.\")\n            ),\n            hr(),\n            h4(\"Dataset Summary\"),\n            verbatimTextOutput(\"dataset_summary\")\n          )\n        )\n      ),\n      \n      # Perception Analysis Tab\n      tabItem(\n        tabName = \"perception\",\n        fluidRow(\n          box(\n            width = 12,\n            h3(\"Perception of Smart Grid and Smart Appliances\"),\n            plotlyOutput(\"perception_plot\")\n          )\n        )\n      ),\n      \n      # Chi-Square Test Tab\n      tabItem(\n        tabName = \"chi_square\",\n        fluidRow(\n          box(\n            width = 12,\n            h3(\"Chi-Square Test\"),\n            sidebarLayout(\n              sidebarPanel(\n                selectInput(\"chi_var1\", \"Select First Categorical Variable:\", choices = colnames(df)),\n                selectInput(\"chi_var2\", \"Select Second Categorical Variable:\", choices = colnames(df)),\n                actionButton(\"run_chi_sq\", \"Run Chi-Square Test\", class = \"btn-primary\")\n              ),\n              mainPanel(\n                h4(\"Chi-Square Test Result\"),\n                verbatimTextOutput(\"chi_sq_result\")\n              )\n            )\n          )\n        )\n      ),\n      \n      # T-Test Tab\n      tabItem(\n        tabName = \"t_test\",\n        fluidRow(\n          box(\n            width = 12,\n            h3(\"T-Test\"),\n            sidebarLayout(\n              sidebarPanel(\n                selectInput(\"t_var1\", \"Select Numerical Variable:\", choices = colnames(df)),\n                selectInput(\"t_var2\", \"Select Categorical Variable (2 levels):\", choices = colnames(df)),\n                actionButton(\"run_t_test\", \"Run T-Test\", class = \"btn-primary\")\n              ),\n              mainPanel(\n                h4(\"T-Test Result\"),\n                verbatimTextOutput(\"t_test_result\")\n              )\n            )\n          )\n        )\n      ),\n      \n      # ANOVA Tab\n      tabItem(\n        tabName = \"anova\",\n        fluidRow(\n          box(\n            width = 12,\n            h3(\"ANOVA\"),\n            sidebarLayout(\n              sidebarPanel(\n                selectInput(\"anova_var1\", \"Select Numerical Variable:\", choices = colnames(df)),\n                selectInput(\"anova_var2\", \"Select Categorical Variable:\", choices = colnames(df)),\n                actionButton(\"run_anova\", \"Run ANOVA\", class = \"btn-primary\")\n              ),\n              mainPanel(\n                h4(\"ANOVA Result\"),\n                verbatimTextOutput(\"anova_result\")\n              )\n            )\n          )\n        )\n      ),\n      \n      # Demographic Visualization Tab\n      tabItem(\n        tabName = \"demographic\",\n        fluidRow(\n          box(\n            width = 12,\n            h3(\"Demographic Visualization\"),\n            sidebarLayout(\n              sidebarPanel(\n                selectInput(\"demo_var\", \"Select Demographic Variable:\", choices = colnames(df))\n              ),\n              mainPanel(\n                plotlyOutput(\"demo_plot\"),\n                DTOutput(\"demo_table\")\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n)\n\n# Server\nserver <- function(input, output, session) {\n  \n  # Dataset summary\n  output$dataset_summary <- renderPrint({\n    summary(df)\n  })\n  \n  # Perception plot\n  output$perception_plot <- renderPlotly({\n    melted_df <- df %>% \n      select(contains(\"perception\")) %>% \n      pivot_longer(cols = everything(), names_to = \"Perception\", values_to = \"Score\")\n    plot_ly(melted_df, x = ~Perception, y = ~Score, type = \"box\") %>%\n      layout(title = \"Perception of Smart Grid and Smart Appliances\")\n  })\n\n  # Chi-Square test\n  observeEvent(input$run_chi_sq, {\n    output$chi_sq_result <- renderPrint({\n      req(input$chi_var1, input$chi_var2)\n      tryCatch({\n        chisq.test(table(df[[input$chi_var1]], df[[input$chi_var2]]))\n      }, error = function(e) {\n        return(paste(\"Error:\", e$message))\n      })\n    })\n  })\n\n  # T-Test\n  observeEvent(input$run_t_test, {\n    output$t_test_result <- renderPrint({\n      req(input$t_var1, input$t_var2)\n      if (!is.numeric(df[[input$t_var1]])) {\n        return(\"Error: The first variable must be numeric.\")\n      }\n      if (length(unique(df[[input$t_var2]])) != 2) {\n        return(\"Error: The second variable must have exactly two levels.\")\n      }\n      tryCatch({\n        t.test(as.integer(df[[input$t_var1]]) ~ df[[input$t_var2]])\n      }, error = function(e) {\n        return(paste(\"Error:\", e$message))\n      })\n    })\n  })\n\n  # ANOVA\n  observeEvent(input$run_anova, {\n    output$anova_result <- renderPrint({\n      req(input$anova_var1, input$anova_var2)\n      tryCatch({\n        aov_result <- aov(df[[input$anova_var1]] ~ df[[input$anova_var2]])\n        summary(aov_result)\n      }, error = function(e) {\n        return(paste(\"Error:\", e$message))\n      })\n    })\n  })\n  \n  # Demographic plot\n  output$demo_plot <- renderPlotly({\n    req(input$demo_var)\n    plot_ly(df, x = ~get(input$demo_var), type = \"histogram\") %>%\n      layout(title = paste(\"Distribution of\", input$demo_var))\n  })\n\n  # Demographic table\n  output$demo_table <- renderDT({\n    req(input$demo_var)\n    df %>% \n      count(get(input$demo_var)) %>% \n      mutate(Percentage = n / sum(n) * 100)\n  })\n}\n\nshinyApp(ui, server)\n```\n\n::: {.cell-output-display}\n`<iframe data-deferred-src=\"app5df35b4504d55d5bab4b14d7a7768106/?w=&amp;__subapp__=1\" width=\"100%\" height=\"400\" class=\"shiny-frame shiny-frame-deferred\"></iframe>`{=html}\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}