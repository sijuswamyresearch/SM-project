{
  "hash": "9273405144667dff38588b8f43ac684f",
  "result": {
    "engine": "knitr",
    "markdown": "title: \"Smart Grid Perception Dashboard\"\noutput: \n  flexdashboard::flex_dashboard:\n    orientation: columns\n    vertical_layout: fill\n    navbar:\n      - { title: \"Home\", href: \"#home\" }\n      - { title: \"Perception Analysis\", href: \"#perception-analysis\" }\n      - { title: \"Inferential Analysis\", href: \"#inferential-analysis\" }\n      - { title: \"Demographic Visualization\", href: \"#demographic-visualization\" }\nruntime: shiny\n\n---\n\n\n\n\n\n::: {.cell .hidden}\n\n```{.r .cell-code .hidden}\nlibrary(flexdashboard)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'flexdashboard' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(ggplot2)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'ggplot2' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'dplyr' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(shiny)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'shiny' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(DT)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'DT' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'DT'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:shiny':\n\n    dataTableOutput, renderDataTable\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(plotly)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'plotly' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'plotly'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following object is masked from 'package:stats':\n\n    filter\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following object is masked from 'package:graphics':\n\n    layout\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(shinyWidgets)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'shinyWidgets' was built under R version 4.2.2\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(janitor)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'janitor' was built under R version 4.2.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n\nAttaching package: 'janitor'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(tidyr)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'tidyr' was built under R version 4.2.3\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\nlibrary(RColorBrewer)\n\n# Load Data and clean column names\ndf <- read.csv(\"DatasetSM.csv\")\ndf <- clean_names(df)\n```\n:::\n\n\n\n\n\n## Main Dashboard\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nui <- fluidPage(\n  tabsetPanel(\n    tabPanel(\"Home\", \n      fluidRow(\n        column(12, \n          h2(\"Welcome to the Smart Grid Perception Dashboard\"),\n          p(\"This tool provides an interactive interface to:\"),\n          tags$ul(\n            tags$li(\"Visualize demographic profiles and perception data.\"),\n            tags$li(\"Perform inferential statistical tests (Chi-Square, T-test, ANOVA).\"),\n            tags$li(\"Gain insights into the perception of smart grid products across various states in India.\")\n          )\n        )\n      )\n    ),\n    \n    tabPanel(\"Perception Analysis\", \n      fluidRow(\n        column(12, \n          h3(\"Perception of Smart Grid and Smart Appliances\"),\n          plotlyOutput(\"perception_plot\"),\n          h4(\"Perception Score Summary Statistics\"),\n          downloadButton(\"download_summary\", \"Download Summary as CSV\"),\n          DTOutput(\"perception_summary\")\n        )\n      )\n    ),\n    \n    tabPanel(\"Inferential Analysis\", \n      tabsetPanel(\n        tabPanel(\"Chi-Square Test\", \n          sidebarLayout(\n            sidebarPanel(\n              selectInput(\"chi_var1\", \"Select First Categorical Variable:\", choices = colnames(df)),\n              selectInput(\"chi_var2\", \"Select Second Categorical Variable:\", choices = colnames(df))\n            ),\n            mainPanel(\n              h4(\"Chi-Square Test Result\"),\n              verbatimTextOutput(\"chi_sq_result\")\n            )\n          )\n        ),\n        tabPanel(\"T-Test\",\n          sidebarLayout(\n            sidebarPanel(\n              selectInput(\"t_var1\", \"Select Numerical Variable:\", choices = colnames(df)),\n              selectInput(\"t_var2\", \"Select Categorical Variable (2 levels):\", choices = colnames(df))\n            ),\n            mainPanel(\n              h4(\"T-Test Result\"),\n              verbatimTextOutput(\"t_test_result\")\n            )\n          )\n        ),\n        tabPanel(\"ANOVA\",\n          sidebarLayout(\n            sidebarPanel(\n              selectInput(\"anova_var1\", \"Select Numerical Variable:\", choices = colnames(df)),\n              selectInput(\"anova_var2\", \"Select Categorical Variable:\", choices = colnames(df))\n            ),\n            mainPanel(\n              h4(\"ANOVA Result\"),\n              verbatimTextOutput(\"anova_result\")\n            )\n          )\n        )\n      )\n    ),\n    \n    tabPanel(\"Demographic Visualization\", \n      sidebarLayout(\n        sidebarPanel(\n          selectInput(\"demo_var\", \"Select Demographic Variable:\", choices = colnames(df))\n        ),\n        mainPanel(\n          plotlyOutput(\"demo_plot\"),\n          DTOutput(\"demo_table\")\n        )\n      )\n    )\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  output$perception_plot <- renderPlotly({\n    melted_df <- df %>% \n      select(contains(\"perception\")) %>% \n      pivot_longer(cols = everything(), names_to = \"Perception\", values_to = \"Score\")\n    \n    plot_ly(melted_df, x = ~Perception, y = ~Score, type = \"box\")\n  })\n\n  perception_summary_data <- reactive({\n    df %>% \n      select(contains(\"perception\")) %>% \n      pivot_longer(cols = everything(), names_to = \"Perception\", values_to = \"Score\") %>% \n      group_by(Perception) %>% \n      summarise(\n        Mean = mean(as.numeric(Score), na.rm = TRUE),\n        Median = median(as.numeric(Score), na.rm = TRUE),\n        SD = sd(as.numeric(Score), na.rm = TRUE),\n        .groups = \"drop\"\n      )\n  })\n\n  output$perception_summary <- renderDT({\n    perception_summary_data()\n  })\n\n  output$download_summary <- downloadHandler(\n    filename = function() { \"perception_summary.csv\" },\n    content = function(file) {\n      write.csv(perception_summary_data(), file, row.names = FALSE)\n    }\n  )\n\n  observe({\n    output$chi_sq_result <- renderPrint({\n      req(input$chi_var1, input$chi_var2)\n      chisq.test(table(df[[input$chi_var1]], df[[input$chi_var2]]))\n    })\n\n    output$t_test_result <- renderPrint({\n      req(input$t_var1, input$t_var2)\n      df_filtered <- df %>% \n        filter(!is.na(df[[input$t_var1]]) & !is.na(df[[input$t_var2]]))\n      \n      t.test(as.numeric(df_filtered[[input$t_var1]]) ~ df_filtered[[input$t_var2]])\n    })\n\n    output$anova_result <- renderPrint({\n      req(input$anova_var1, input$anova_var2)\n      df_filtered <- df %>% \n        filter(!is.na(df[[input$anova_var1]]) & !is.na(df[[input$anova_var2]]))\n      \n      aov_result <- aov(as.numeric(df_filtered[[input$anova_var1]]) ~ df_filtered[[input$anova_var2]])\n      summary(aov_result)\n    })\n    \n    output$demo_plot <- renderPlotly({\n      req(input$demo_var)\n      plot_ly(df, x = ~ .data[[input$demo_var]], type = \"histogram\")\n    })\n\n    output$demo_table <- renderDT({\n      req(input$demo_var)\n      df %>% \n        count(.data[[input$demo_var]], name = \"Count\") %>% \n        mutate(Percentage = Count / sum(Count) * 100)\n    })\n  })\n}\n\nshinyApp(ui, server)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nPhantomJS not found. You can install it with webshot::install_phantomjs(). If it is installed, please make sure the phantomjs executable can be found via the PATH variable.\n```\n\n\n:::\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}